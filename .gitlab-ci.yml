image: scratch
variables:
      GIT_SUBMODULE_STRATEGY: recursive

stages:
    - prepare
    - binary
    - verify
    - upload

.enable_sudo_nobody: &enable_sudo_nobody
        echo "nobody ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers                  # Enable sudo to work without prompting a password

.install_gitchangelog_arch: &install_gitchangelog_arch
        sudo pacman -Sy --noconfirm --needed python curl libidn2 && sudo sh -c 'curl -sSL https://raw.githubusercontent.com/vaab/gitchangelog/master/src/gitchangelog/gitchangelog.py > /usr/local/bin/gitchangelog' && sudo chmod +x /usr/local/bin/gitchangelog

.install_gitchangelog_debian: &install_gitchangelog_debian
        sudo apt-get --yes install python3 python3-mako curl && sudo sh -c 'curl -sSL https://raw.githubusercontent.com/vaab/gitchangelog/master/src/gitchangelog/gitchangelog.py > /usr/local/bin/gitchangelog' && sudo chmod +x /usr/local/bin/gitchangelog && [ -f /usr/bin/python ] || ln -s python3 /usr/bin/python

.tzdata_fix: &tzdata_fix
        export DEBIAN_FRONTEND=noninteractive && echo 'tzdata tzdata/Areas select Europe' > debconf && echo 'tzdata tzdata/Zones/Europe select Brussels' >> debconf && debconf-set-selections debconf

## This activates the use of the configured private keys in a build pipeline.
.enable_private_keys: &enable_private_keys
    ## Install ssh-agent if not already installed
    - 'which ssh-agent || sudo pacman -Sy --noconfirm --needed openssh'
  
    ## Run ssh-agent
    - eval $(ssh-agent -s)
  
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work without extra base64 encoding. (https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556)
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  
    ## Set the user name and and email for git commands
    - git config --global user.email "unknown@unknown.com"
    - git config --global user.name "Gitlab CI Runner"
  
    ## Set known hosts using the configurable SSH_KNOWN_HOSTS variable
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

############################################################################### PKGBUILD #############################################################

.pkgbuild:prepare: &pkgbuild_prepare
    stage: prepare
    variables:
        MAKE_TARGETS: install
        ARTIFACT_DIR: package-source
    script:
        - sudo pacman -Syu --noconfirm --needed
        - sudo pacman -S --noconfirm --needed make sed lsb-release sudo git base-devel lsb-release
        - *install_gitchangelog_arch
        - make "PREFIX=${PWD}/${ARTIFACT_DIR}" ${MAKE_TARGETS}
    artifacts:
        expire_in: 1 day
        paths:
            - package-source

.pkgbuild:binary: &pkgbuild_binary
    stage: binary
    variables:
        BUILD_DIR: package-source
        ARTIFACT_DIR: binary-package
    script: 
        - sudo pacman -Sy --noconfirm --needed base-devel sudo libffi
        - yay -S --noconfirm --needed rapidcheck microsoft-gsl
        - mkdir --mode 777 --parents "${ARTIFACT_DIR}"
        - export "PKGDEST=$(pwd)/${ARTIFACT_DIR}"
        - export "BUILD_CONF=$(pwd)/pkgbuild/makepkg.conf"
        - pushd ${BUILD_DIR}
        - makepkg --noconfirm --needed --syncdeps --config "${BUILD_CONF}"
        - popd
    artifacts:
        expire_in: 1 day
        paths:
            - binary-package

.pkgbuild:analyze: &pkgbuild_analyze
    stage: verify
    variables:
        PACKAGE_SOURCE: package-source
        BINARY_DIR: binary-package
    script:
        - pacman -Syu --noconfirm --needed
        - pacman -S --noconfirm --needed namcap yaml-cpp boost-libs gcc-libs
        - namcap ${PACKAGE_SOURCE}/PKGBUILD
        - namcap ${BINARY_DIR}/*.tar.xz

.pkgbuild:upload: &pkgbuild_upload
    stage: upload
    variables:
        URL: INVALID_URL.git
    before_script:
        *enable_private_keys
    script:
        - echo "Cloning ${URL}..."
        - git clone ${URL} repo
        - rm -f repo/{.SRCINFO,PKGBUILD,exec-helper.changelog}
        - mv package-source/{.SRCINFO,PKGBUILD,*.changelog} repo/
        - export EXEC_HELPER_HASH=$(git log -n 1 --pretty=format:"%H")
        - git -C repo add .
        - git -C repo diff-index --quiet HEAD -- && echo 'No changes -- skipping commit' || git -C repo commit -m "Updated package to exec-helper commit ${EXEC_HELPER_HASH}"
        - git -C repo push

pkgbuild:prepare:
    <<: *pkgbuild_prepare
    image: bverhagen/awesome-aur-wrapper:yay

arch-linux:prepare:
    <<: *pkgbuild_prepare
    image: bverhagen/awesome-aur-wrapper:yay

pkgbuild:binary:
    <<: *pkgbuild_binary
    image: bverhagen/awesome-aur-wrapper:yay
    needs:
        - job: pkgbuild:prepare
          artifacts: true

arch-linux:binary:
    <<: *pkgbuild_binary
    image: bverhagen/awesome-aur-wrapper:yay
    needs:
        - job: arch-linux:prepare
          artifacts: true

pkgbuild:analyze:
    <<: *pkgbuild_analyze
    image: archlinux
    needs:
        - job: pkgbuild:prepare
          artifacts: true
        - job: pkgbuild:binary
          artifacts: true

arch-linux:analyze:
    <<: *pkgbuild_analyze
    image: archlinux
    needs:
        - job: arch-linux:prepare
          artifacts: true
        - job: arch-linux:binary
          artifacts: true

arch-linux:upload:
    <<: *pkgbuild_upload
    image: bverhagen/awesome-aur-wrapper:yay
    needs:
        - job: arch-linux:prepare
          artifacts: true
        - job: arch-linux:analyze
          artifacts: false
    variables:
        URL: ssh://aur@aur.archlinux.org/exec-helper.git
    only:
        - master

############################################################################### dpkg  #############################################################

.dpkg:prepare: &dpkg_prepare
    stage: prepare
    variables:
        MAKE_TARGETS: prepare
    script:
        - export DEBIAN_FRONTEND=noninteractive
        - debconf-set-selections dpkg/debconf
        - apt-get update
        - apt-get install --assume-yes sudo make sed lsb-release git gcc xz-utils python3-pip
        - *install_gitchangelog_debian
        - *enable_sudo_nobody
        - echo Making targets= ${MAKE_TARGETS}
        - sudo -u nobody make ${MAKE_TARGETS}
    artifacts:
        expire_in: 1 day
        paths:
            - dpkg/Makefile
            - dpkg/*.tar.xz

.dpkg:source: &dpkg_source
    stage: binary
    variables:
        MAKE_TARGETS: source
        ADDITIONAL_BUILD_DEPENDENCIES: ""
    script:
        - export DEBIAN_FRONTEND=noninteractive
        - debconf-set-selections dpkg/debconf
        - *tzdata_fix
        - apt-get update
        - apt-get install --assume-yes debhelper build-essential equivs devscripts sudo git lsb-release sed python3-pip python3-sphinx python3-sphinx-rtd-theme cmake libboost-program-options-dev libboost-filesystem-dev libboost-log-dev libyaml-cpp-dev libmsgsl-dev pkg-config ${ADDITIONAL_BUILD_DEPENDENCIES}
        - *install_gitchangelog_debian
        - *enable_sudo_nobody
        - echo "Making targets = ${MAKE_TARGETS}"
        - sudo -u nobody make ${MAKE_TARGETS}
    artifacts:
        expire_in: 1 day
        paths:
            - dpkg/package/source

.dpkg:binary: &dpkg_binary
    stage: binary
    variables:
        MAKE_TARGETS: binary
        ADDITIONAL_BUILD_DEPENDENCIES: ""
    script:
        - export DEBIAN_FRONTEND=noninteractive
        - debconf-set-selections dpkg/debconf
        - *tzdata_fix
        - apt-get update
        - apt-get install --assume-yes debhelper build-essential equivs devscripts sudo git lsb-release sed python3-pip python3-sphinx python3-sphinx-rtd-theme cmake libboost-program-options-dev libboost-filesystem-dev libboost-log-dev libyaml-cpp-dev libmsgsl-dev pkg-config ${ADDITIONAL_BUILD_DEPENDENCIES}
        - *install_gitchangelog_debian
        - *enable_sudo_nobody
        - echo "Making targets = ${MAKE_TARGETS}"
        - sudo -u nobody make ${MAKE_TARGETS}
    artifacts:
        expire_in: 1 day
        paths:
            - dpkg/package/binary

.dpkg:analyze: &dpkg_analyze
    stage: verify
    variables:
        LINTIAN_ARGS: "--no-cfg"
    script:
        - export DEBIAN_FRONTEND=noninteractive
        - debconf-set-selections dpkg/debconf
        - *tzdata_fix
        - apt-get update
        - apt-get install --assume-yes lintian
        - pushd dpkg/package/source && lintian ${LINTIAN_ARGS} --allow-root *.dsc *.changes
        - popd
        - pushd dpkg/package/binary && lintian ${LINTIAN_ARGS} --allow-root *.dsc *.changes *.deb
        - popd

dpkg:prepare:
    <<: *dpkg_prepare
    image: debian:testing
    variables:
        MAKE_TARGETS: dpkg TARGET=prepare

debian-testing:prepare:
    <<: *dpkg_prepare
    image: debian:testing

ubuntu-rolling:prepare:
    <<: *dpkg_prepare
    image: ubuntu:rolling

ubuntu-devel:prepare:
    <<: *dpkg_prepare
    image: ubuntu:devel

dpkg:source:
    <<: *dpkg_source
    image: debian:testing
    needs:
        - job: dpkg:prepare
          artifacts: true
    variables:
        MAKE_TARGETS: dpkg TARGET=source

debian-testing:source:
    <<: *dpkg_source
    image: debian:testing
    needs:
        - job: debian-testing:prepare
          artifacts: true

ubuntu-rolling:source:
    <<: *dpkg_source
    image: ubuntu:rolling
    needs:
        - job: ubuntu-rolling:prepare
          artifacts: true

ubuntu-devel:source:
    <<: *dpkg_source
    image: ubuntu:devel
    needs:
        - job: ubuntu-devel:prepare
          artifacts: true

dpkg:binary:
    <<: *dpkg_binary
    image: debian:testing
    needs:
        - job: dpkg:prepare
          artifacts: true
    variables:
        MAKE_TARGETS: dpkg TARGET=binary
    before_script:
        - export DEBIAN_FRONTEND=noninteractive
        - debconf-set-selections dpkg/debconf
        - apt update
        - apt-get install --yes git build-essential make cmake bison flex python3

debian-testing:binary:
    <<: *dpkg_binary
    image: debian:testing
    needs:
        - job: debian-testing:prepare
          artifacts: true
    before_script:
        - export DEBIAN_FRONTEND=noninteractive
        - debconf-set-selections dpkg/debconf
        - apt update
        - apt-get install --yes git build-essential make cmake bison flex python3

ubuntu-rolling:binary:
    <<: *dpkg_binary
    image: ubuntu:rolling
    needs:
        - job: ubuntu-rolling:prepare
          artifacts: true
    before_script:
        - export DEBIAN_FRONTEND=noninteractive
        - debconf-set-selections dpkg/debconf
        - apt update
        - apt-get install --yes git build-essential make cmake bison flex python3

ubuntu-devel:binary:
    <<: *dpkg_binary
    image: ubuntu:devel
    needs:
        - job: ubuntu-devel:prepare
          artifacts: true
    before_script:
        - export DEBIAN_FRONTEND=noninteractive
        - debconf-set-selections dpkg/debconf
        - *tzdata_fix
        - apt update
        - apt-get install --yes git build-essential make cmake bison flex python3

dpkg:analyze:
    <<: *dpkg_analyze
    image: debian:testing
    needs:
        - job: dpkg:prepare
          artifacts: true
        - job: dpkg:source
          artifacts: true
        - job: dpkg:binary
          artifacts: true

debian-testing:analyze:
    <<: *dpkg_analyze
    image: debian:testing
    needs:
        - job: debian-testing:prepare
          artifacts: true
        - job: debian-testing:source
          artifacts: true
        - job: debian-testing:binary
          artifacts: true

ubuntu-rolling:analyze:
    <<: *dpkg_analyze
    image: ubuntu:rolling
    needs:
        - job: ubuntu-rolling:prepare
          artifacts: true
        - job: ubuntu-rolling:source
          artifacts: true
        - job: ubuntu-rolling:binary
          artifacts: true

ubuntu-devel:analyze:
    <<: *dpkg_analyze
    image: ubuntu:devel
    needs:
        - job: ubuntu-devel:prepare
          artifacts: true
        - job: ubuntu-devel:source
          artifacts: true
        - job: ubuntu-devel:binary
          artifacts: true

############################################################################### containers  #############################################################
.docker:build: &docker_build
    stage: binary
    image: docker:latest
    needs: []
    services:
        - docker:dind
    variables:
        IMAGE: "???"
        WORKDIR: "."
        DOCKERFILE: "Dockerfile"
        DOCKER_ARGS: ""
    script:
        - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
        - cd "${WORKDIR}"
        - docker build --compress=true --force-rm=true --pull=true --no-cache=true --rm=true ${DOCKER_ARGS} "--tag=${IMAGE}" "--file=${DOCKERFILE}" .
        - docker push "${IMAGE}"

.docker:upload: &docker_upload
    stage: upload
    image: docker:latest
    needs: []
    services:
        - docker:dind
    variables:
        SOURCE_IMAGE: "???"
        TARGET_IMAGE: "???"
    script:
        - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
        - docker pull "${SOURCE_IMAGE}"
        - docker tag "${SOURCE_IMAGE}" "${TARGET_IMAGE}"
        - export CI_REGISTRY_USER=bverhagen
        - export CI_REGISTRY_PASSWORD=${DOCKER_HUB_TOKEN}
        - rm -f ~/.docker/config.json
        - docker login -u bverhagen -p "${DOCKER_HUB_TOKEN}" docker.io
        - docker push "${TARGET_IMAGE}"

docker:arch-linux:build:
    <<: *docker_build
    needs: []
    variables:
        IMAGE: "${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHA}:arch-linux"
        WORKDIR: "."
        DOCKERFILE: "containers/docker/pkgbuild.Dockerfile"
        DOCKER_ARGS: ""

docker:debian-testing:build:
    <<: *docker_build
    needs: []
    variables:
        IMAGE: "${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHA}:debian-testing"
        WORKDIR: "."
        DOCKERFILE: "containers/docker/dpkg.Dockerfile"
        DOCKER_ARGS: "--build-arg BASE_IMAGE=debian:testing"

docker:ubuntu-rolling:build:
    <<: *docker_build
    needs: []
    variables:
        IMAGE: "${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHA}:ubuntu-rolling"
        WORKDIR: "."
        DOCKERFILE: "containers/docker/dpkg.Dockerfile"
        DOCKER_ARGS: "--build-arg BASE_IMAGE=ubuntu:rolling"

docker:ubuntu-devel:build:
    <<: *docker_build
    needs: []
    variables:
        IMAGE: "${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHA}:ubuntu-devel"
        WORKDIR: "."
        DOCKERFILE: "containers/docker/dpkg.Dockerfile"
        DOCKER_ARGS: "--build-arg BASE_IMAGE=ubuntu:devel"

docker:arch-linux:upload:
    <<: *docker_upload
    needs:
        - job: docker:arch-linux:build
          artifacts: false
        - job: arch-linux:analyze
          artifacts: false
    variables:
        SOURCE_IMAGE: "${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHA}:arch-linux"
        TARGET_IMAGE: "bverhagen/exec-helper:arch-linux"
    only:
        - master

docker:debian-testing:upload:
    <<: *docker_upload
    needs:
        - job: docker:debian-testing:build
          artifacts: false
        - job: debian-testing:analyze
          artifacts: false
    variables:
        SOURCE_IMAGE: "${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHA}:debian-testing"
        TARGET_IMAGE: "bverhagen/exec-helper:debian-testing"
    only:
        - master

docker:ubuntu-rolling:upload:
    <<: *docker_upload
    needs:
        - job: docker:ubuntu-rolling:build
          artifacts: false
        - job: ubuntu-rolling:analyze
          artifacts: false
    variables:
        SOURCE_IMAGE: "${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHA}:ubuntu-rolling"
        TARGET_IMAGE: "bverhagen/exec-helper:ubuntu-focal"
    only:
        - master

docker:ubuntu-devel:upload:
    <<: *docker_upload
    needs:
        - job: docker:ubuntu-devel:build
          artifacts: false
        - job: ubuntu-devel:analyze
          artifacts: false
    variables:
        SOURCE_IMAGE: "${CI_REGISTRY_IMAGE}/${CI_COMMIT_SHA}:ubuntu-devel"
        TARGET_IMAGE: "bverhagen/exec-helper:ubuntu-groovy"
    only:
        - master
